{"service_name":"travis-ci","service_job_id":"10699104","git":{"branch":"(detached from d1b3a55)","head":{"id":"d1b3a558ce42ee987ae5e67640d86debcec5f858","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Merge branch 'release\/0.2.0' into develop"},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/otis.git"}]},"run_at":"2013-08-28 05:15:12 +0000","source_files":[{"name":"Eloquent\/Otis\/GoogleAuthenticator\/GoogleAuthenticatorUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\GoogleAuthenticator;\n\nuse Base32\\Base32;\n\n\/**\n * Generates URIs for use with Google Authenticator, and other compatible OTP\n * apps.\n *\/\nclass GoogleAuthenticatorUriFactory implements\n    GoogleAuthenticatorUriFactoryInterface\n{\n    \/**\n     * Create an HOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param string       $secret        The shared secret.\n     * @param string       $label         The label for the account.\n     * @param string|null  $issuer        The issuer name.\n     * @param integer|null $counter       The current counter value.\n     * @param integer|null $digits        The number of password digits.\n     * @param string|null  $algorithm     The algorithm to use.\n     * @param boolean|null $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The HOTP URI.\n     *\/\n    public function createHotpUri(\n        $secret,\n        $label,\n        $issuer = null,\n        $counter = null,\n        $digits = null,\n        $algorithm = null,\n        $issuerInLabel = null\n    ) {\n        return $this->createUri(\n            'hotp',\n            $secret,\n            $label,\n            $issuer,\n            $counter,\n            null,\n            $digits,\n            $algorithm,\n            $issuerInLabel\n        );\n    }\n\n    \/**\n     * Create a TOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param string       $secret        The shared secret.\n     * @param string       $label         The label for the account.\n     * @param string|null  $issuer        The issuer name.\n     * @param integer|null $window        The number of seconds each value is valid for.\n     * @param integer|null $digits        The number of password digits.\n     * @param string|null  $algorithm     The algorithm to use.\n     * @param boolean|null $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The TOTP URI.\n     *\/\n    public function createTotpUri(\n        $secret,\n        $label,\n        $issuer = null,\n        $window = null,\n        $digits = null,\n        $algorithm = null,\n        $issuerInLabel = null\n    ) {\n        return $this->createUri(\n            'totp',\n            $secret,\n            $label,\n            $issuer,\n            null,\n            $window,\n            $digits,\n            $algorithm,\n            $issuerInLabel\n        );\n    }\n\n    \/**\n     * @param string       $type\n     * @param string       $secret\n     * @param strgin       $label\n     * @param string|null  $issuer\n     * @param integer|null $counter\n     * @param integer|null $window\n     * @param integer|null $digits\n     * @param string|null  $algorithm\n     * @param boolean|null $issuerInLabel\n     *\n     * @return string\n     *\/\n    protected function createUri(\n        $type,\n        $secret,\n        $label,\n        $issuer = null,\n        $counter = null,\n        $window = null,\n        $digits = null,\n        $algorithm = null,\n        $issuerInLabel = null\n    ) {\n        if (null === $counter && 'hotp' === $type) {\n            $counter = 1;\n        }\n        if (null === $window && 'totp' === $type) {\n            $window = 30;\n        }\n        if (null === $digits) {\n            $digits = 6;\n        }\n        if (null === $algorithm) {\n            $algorithm = 'SHA1';\n        }\n        if (null === $issuerInLabel) {\n            $issuerInLabel = false;\n        }\n\n        $legacyIssuer = '';\n        $parameters = '';\n\n        if (null !== $counter && 1 !== $counter) {\n            $parameters .= '&counter=' . rawurlencode($counter);\n        }\n        if (null !== $window && 30 !== $window) {\n            $parameters .= '&period=' . rawurlencode($window);\n        }\n        if (null !== $digits && 6 !== $digits) {\n            $parameters .= '&digits=' . rawurlencode($digits);\n        }\n        if (null !== $algorithm && 'SHA1' !== $algorithm) {\n            $parameters .= '&algorithm=' . rawurlencode($algorithm);\n        }\n        if (null !== $issuer) {\n            if ($issuerInLabel) {\n                $legacyIssuer = rawurlencode($issuer) . ':';\n            }\n\n            $parameters .= '&issuer=' . rawurlencode($issuer);\n        }\n\n        return sprintf(\n            'otpauth:\/\/%s\/%s%s?secret=%s%s',\n            rawurlencode($type),\n            $legacyIssuer,\n            rawurlencode($label),\n            rawurlencode(Base32::encode($secret)),\n            $parameters\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,3,3,3,3,3,3,3,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,3,3,3,3,3,3,3,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,1,1,6,1,1,6,2,2,6,2,2,6,2,2,null,6,6,null,6,2,2,6,2,2,6,4,4,6,4,4,6,4,2,2,null,4,4,null,6,6,6,6,6,6,null,6,null,null]},{"name":"Eloquent\/Otis\/GoogleAuthenticator\/GoogleAuthenticatorUriFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\GoogleAuthenticator;\n\n\/**\n * The interface implemented by Google Authenticator URI factories.\n *\/\ninterface GoogleAuthenticatorUriFactoryInterface\n{\n    \/**\n     * Create an HOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param string       $secret        The shared secret.\n     * @param string       $label         The label for the account.\n     * @param string|null  $issuer        The issuer name.\n     * @param integer|null $counter       The current counter value.\n     * @param integer|null $digits        The number of password digits.\n     * @param string|null  $algorithm     The algorithm to use.\n     * @param boolean|null $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The HOTP URI.\n     *\/\n    public function createHotpUri(\n        $secret,\n        $label,\n        $issuer = null,\n        $counter = null,\n        $digits = null,\n        $algorithm = null,\n        $issuerInLabel = null\n    );\n\n    \/**\n     * Create a TOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param string       $secret        The shared secret.\n     * @param string       $label         The label for the account.\n     * @param string|null  $issuer        The issuer name.\n     * @param integer|null $window        The number of seconds each value is valid for.\n     * @param integer|null $digits        The number of password digits.\n     * @param string|null  $algorithm     The algorithm to use.\n     * @param boolean|null $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The TOTP URI.\n     *\/\n    public function createTotpUri(\n        $secret,\n        $label,\n        $issuer = null,\n        $window = null,\n        $digits = null,\n        $algorithm = null,\n        $issuerInLabel = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Hotp\/Exception\/InvalidPasswordLengthException.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Hotp\\Exception;\n\nuse Exception;\n\n\/**\n * The requested password length is invalid.\n *\/\nclass InvalidPasswordLengthException extends Exception\n{\n    \/**\n     * Construct a new invalid password length exception.\n     *\n     * @param integer        $length   The length requested.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($length, Exception $previous = null)\n    {\n        $this->length = $length;\n\n        parent::__construct(\n            sprintf(\n                'Invalid HOTP password length (%s).',\n                var_export($length, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the requested password length.\n     *\n     * @return integer The length requested.\n     *\/\n    public function length()\n    {\n        return $this->length;\n    }\n\n    private $length;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Otis\/Hotp\/HotpGenerator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Hotp;\n\n\/**\n * Generates HOTP values.\n *\/\nclass HotpGenerator implements HotpGeneratorInterface\n{\n    \/**\n     * Construct a new HOTP generator.\n     *\n     * @param string|null $algorithm The hash algorithm to use.\n     *\/\n    public function __construct($algorithm = null)\n    {\n        if (null === $algorithm) {\n            $algorithm = 'sha1';\n        }\n\n        $this->algorithm = $algorithm;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function algorithm()\n    {\n        return $this->algorithm;\n    }\n\n    \/**\n     * Generate an HOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @param string  $secret  The shared secret.\n     * @param integer $counter The counter value.\n     *\n     * @return HotpValue The generated HOTP value.\n     *\/\n    public function generate($secret, $counter)\n    {\n        return new HotpValue(\n            hash_hmac($this->algorithm(), $this->pack($counter), $secret, true)\n        );\n    }\n\n    \/**\n     * @param integer $integer\n     *\n     * @return string\n     *\/\n    protected function pack($integer)\n    {\n        $highPart = ($integer & 0xffffffff00000000) >> 32;\n        $lowPart  = ($integer & 0x00000000ffffffff);\n\n        return pack('N2', $highPart, $lowPart);\n    }\n\n    private $algorithm;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32,11,11,null,32,32,null,null,null,null,null,null,32,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30,30,30,null,null,null,null,null,null,null,null,null,30,30,null,30,null,null,null,null]},{"name":"Eloquent\/Otis\/Hotp\/HotpGeneratorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Hotp;\n\n\/**\n * The interface implemented by HOTP generators.\n *\/\ninterface HotpGeneratorInterface\n{\n    \/**\n     * Generate an HOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @param string  $secret  The shared secret.\n     * @param integer $counter The counter value.\n     *\n     * @return HotpValue The generated HOTP value.\n     *\/\n    public function generate($secret, $counter);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Hotp\/HotpValidator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Hotp;\n\n\/**\n * Validates HOTP passwords.\n *\/\nclass HotpValidator implements HotpValidatorInterface\n{\n    \/**\n     * Construct a new HOTP validator.\n     *\n     * @param HotpGeneratorInterface|null $generator The generator to use.\n     *\/\n    public function __construct(HotpGeneratorInterface $generator = null)\n    {\n        if (null === $generator) {\n            $generator = new HotpGenerator;\n        }\n\n        $this->generator = $generator;\n    }\n\n    \/**\n     * Get the generator.\n     *\n     * @return HotpGeneratorInterface The generator.\n     *\/\n    public function generator()\n    {\n        return $this->generator;\n    }\n\n    \/**\n     * Validate an HOTP password.\n     *\n     * @param string       $password       The password to validate.\n     * @param string       $secret         The HOTP secret.\n     * @param integer      $currentCounter The current counter value.\n     * @param integer|null &$newCounter    Will be set to the new counter value.\n     * @param integer|null $digits         The number of password digits.\n     * @param integer|null $window         The amount of counter increments to search through for a match.\n     *\n     * @return boolean True if the password is valid.\n     *\/\n    public function validate(\n        $password,\n        $secret,\n        $currentCounter,\n        &$newCounter = null,\n        $digits = null,\n        $window = null\n    ) {\n        $newCounter = $currentCounter;\n\n        if (null === $digits) {\n            $digits = 6;\n        }\n        if (null === $window) {\n            $window = 0;\n        }\n\n        for (\n            $counter = $currentCounter;\n            $counter <= $currentCounter + $window;\n            ++$counter\n        ) {\n            $value = $this->generator()->generate($secret, $counter);\n\n            try {\n                $thisPassword = $value->string($digits);\n            } catch (Exception\\InvalidPasswordLengthException $e) {\n                return false;\n            }\n\n            if ($thisPassword === $password) {\n                $newCounter = $counter + 1;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    \/**\n     * Validate a sequence of HOTP passwords.\n     *\n     * @param array<string> $passwords      The password sequence to validate.\n     * @param string        $secret         The HOTP secret.\n     * @param integer       $currentCounter The current counter value.\n     * @param integer|null  &$newCounter    Will be set to the new counter value.\n     * @param integer|null  $digits         The number of password digits.\n     * @param integer|null  $window         The amount of counter increments to search through for a match.\n     *\n     * @return boolean True if the password is valid.\n     *\/\n    public function validateSequence(\n        array $passwords,\n        $secret,\n        $currentCounter,\n        &$newCounter = null,\n        $digits = null,\n        $window = null\n    ) {\n        $newCounter = $currentCounter;\n\n        if (count($passwords) < 1) {\n            return false;\n        }\n\n        if (\n            $this->validate(\n                array_shift($passwords),\n                $secret,\n                $currentCounter,\n                $counter,\n                $digits,\n                $window\n            )\n        ) {\n            foreach ($passwords as $password) {\n                if (\n                    !$this->validate(\n                        $password,\n                        $secret,\n                        $counter,\n                        $counter,\n                        $digits\n                    )\n                ) {\n                    return false;\n                }\n            }\n\n            $newCounter = $counter;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    private $generator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,15,1,1,null,15,15,null,null,null,null,null,null,null,null,14,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12,null,12,9,9,12,9,9,null,null,12,12,null,9,12,null,null,12,12,1,null,null,11,6,null,6,null,9,null,7,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,7,1,null,null,null,6,6,6,6,6,6,null,6,6,4,null,4,4,4,4,4,null,4,4,2,null,2,null,2,null,2,null,null,2,null,null,null,null]},{"name":"Eloquent\/Otis\/Hotp\/HotpValidatorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Hotp;\n\n\/**\n * The interface implemented by HOTP validators.\n *\/\ninterface HotpValidatorInterface\n{\n    \/**\n     * Validate an HOTP password.\n     *\n     * @param string       $password       The password to validate.\n     * @param string       $secret         The HOTP secret.\n     * @param integer      $currentCounter The current counter value.\n     * @param integer|null &$newCounter    Will be set to the new counter value.\n     * @param integer|null $digits         The number of password digits.\n     * @param integer|null $window         The amount of counter increments to search through for a match.\n     *\n     * @return boolean True if the password is valid.\n     *\/\n    public function validate(\n        $password,\n        $secret,\n        $currentCounter,\n        &$newCounter = null,\n        $digits = null,\n        $window = null\n    );\n\n    \/**\n     * Validate a sequence of HOTP passwords.\n     *\n     * @param array<string> $passwords      The password sequence to validate.\n     * @param string        $secret         The HOTP secret.\n     * @param integer       $currentCounter The current counter value.\n     * @param integer|null  &$newCounter    Will be set to the new counter value.\n     * @param integer|null  $digits         The number of password digits.\n     * @param integer|null  $window         The amount of counter increments to search through for a match.\n     *\n     * @return boolean True if the password is valid.\n     *\/\n    public function validateSequence(\n        array $passwords,\n        $secret,\n        $currentCounter,\n        &$newCounter = null,\n        $digits = null,\n        $window = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Hotp\/HotpValue.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Hotp;\n\n\/**\n * Represents a generated HOTP value.\n *\/\nclass HotpValue\n{\n    \/**\n     * Construct a new HOTP value.\n     *\n     * @param string $value The raw value.\n     *\/\n    public function __construct($value)\n    {\n        $this->value = $value;\n        $this->truncated = $this->truncate($value);\n    }\n\n    \/**\n     * Get the raw value.\n     *\n     * @return string The raw value.\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * Get the truncated value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @return integer The truncated value.\n     *\/\n    public function truncated()\n    {\n        return $this->truncated;\n    }\n\n    \/**\n     * Generate a numeric string with a fixed number of digits from the result.\n     *\n     * @param integer|null $length The number of digits in the result string.\n     *\n     * @return string                                   The result string.\n     * @throws Exception\\InvalidPasswordLengthException If the requested length\n     *     is invalid.\n     *\/\n    public function string($length = null)\n    {\n        if (null === $length) {\n            $length = 6;\n        }\n        if ($length < 6 || $length > 10) {\n            throw new Exception\\InvalidPasswordLengthException($length);\n        }\n\n        return substr(\n            str_pad(\n                strval($this->truncated()),\n                $length,\n                '0',\n                STR_PAD_LEFT\n            ),\n            -1 * $length\n        );\n    }\n\n    \/**\n     * @param string $value\n     *\n     * @return integer\n     *\/\n    protected function truncate($value)\n    {\n        $value = bin2hex($value);\n        $parts = str_split($value, 2);\n\n        foreach ($parts as $i => $part) {\n            $parts[$i] = hexdec($part);\n        }\n\n        $offset = $parts[count($parts) - 1] & 0xf;\n\n        return\n            (($parts[$offset] & 0x7f) << 24) |\n            (($parts[$offset + 1] & 0xff) << 16) |\n            (($parts[$offset + 2] & 0xff) << 8) |\n            ($parts[$offset + 3] & 0xff)\n        ;\n    }\n\n    private $value;\n    private $truncated;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12,12,12,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,null,null,null,null,null,null,11,1,1,11,4,null,null,7,7,7,7,7,null,7,null,7,null,null,null,null,null,null,null,null,null,12,12,null,12,12,12,null,12,null,null,12,12,12,12,12,null,null,null,null,null]},{"name":"Eloquent\/Otis\/QrCode\/ErrorCorrectionLevel.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\QrCode;\n\nuse Eloquent\\Enumeration\\Multiton;\n\n\/**\n * The available error correction levels for QR codes.\n *\/\nfinal class ErrorCorrectionLevel extends Multiton\n{\n    \/**\n     * Get the letter code.\n     *\n     * @return string The letter code.\n     *\/\n    public function letterCode()\n    {\n        return $this->letterCode;\n    }\n\n    \/**\n     * Get the number code.\n     *\n     * @return integer The number code.\n     *\/\n    public function numberCode()\n    {\n        return $this->numberCode;\n    }\n\n    protected static function initializeMembers()\n    {\n        \/\/ Allows recovery of up to 7% data loss.\n        new static('LOW', 'L', 1);\n        \/\/ Allows recovery of up to 15% data loss.\n        new static('MEDIUM', 'M', 2);\n        \/\/ Allows recovery of up to 25% data loss.\n        new static('QUARTILE', 'Q', 3);\n        \/\/ Allows recovery of up to 30% data loss.\n        new static('HIGH', 'H', 4);\n    }\n\n    \/**\n     * @param string  $key\n     * @param string  $letterCode\n     * @param integer $numberCode\n     *\/\n    protected function __construct($key, $letterCode, $numberCode)\n    {\n        parent::__construct($key);\n\n        $this->letterCode = $letterCode;\n        $this->numberCode = $numberCode;\n    }\n\n    private $letterCode;\n    private $numberCode;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,3,null,3,null,3,null,3,3,null,null,null,null,null,null,null,null,3,null,3,3,3,null,null,null,null]},{"name":"Eloquent\/Otis\/QrCode\/GoogleChartsQrCodeUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\QrCode;\n\n\/**\n * A QR code URI factory that produces Google Charts URIs.\n *\/\nclass GoogleChartsQrCodeUriFactory implements QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    ) {\n        if (null === $size) {\n            $size = 250;\n        }\n        if (null === $errorCorrection) {\n            $errorCorrection = ErrorCorrectionLevel::LOW();\n        }\n\n        if (ErrorCorrectionLevel::LOW() === $errorCorrection) {\n            $errorCorrectionString = '';\n        } else {\n            $errorCorrectionString = $errorCorrection->letterCode();\n        }\n\n        return sprintf(\n            'https:\/\/chart.googleapis.com\/chart?cht=qr' .\n                '&chs=%sx%s&chld=%s%%7C0&chl=%s',\n            rawurlencode($size),\n            rawurlencode($size),\n            $errorCorrectionString,\n            rawurlencode($data)\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,1,1,2,1,1,null,2,1,1,1,null,null,2,null,2,2,2,2,2,2,null,null]},{"name":"Eloquent\/Otis\/QrCode\/KaywaQrCodeUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\QrCode;\n\n\/**\n * A QR code URI factory that produces URIs pointing to the Kaywa QR code\n * service.\n *\/\nclass KaywaQrCodeUriFactory implements QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    ) {\n        if (null === $size) {\n            $size = 8;\n        }\n        if (null === $errorCorrection) {\n            $errorCorrection = ErrorCorrectionLevel::LOW();\n        }\n\n        $parameters = '';\n        if (8 !== $size) {\n            $parameters .= '&s=' . rawurlencode($size);\n        }\n        if (ErrorCorrectionLevel::MEDIUM() !== $errorCorrection) {\n            $parameters .= '&l=' . rawurlencode($errorCorrection->numberCode());\n        }\n\n        return sprintf(\n            'http:\/\/qrfree.kaywa.com\/?d=%s%s',\n            rawurlencode($data),\n            $parameters\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,1,1,2,1,1,null,2,2,1,1,2,2,2,null,2,2,2,null,2,null,null]},{"name":"Eloquent\/Otis\/QrCode\/QrCodeUriFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\QrCode;\n\n\/**\n * The interface implemented by QR code URI factories.\n *\/\ninterface QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/QrCode\/QrServerQrCodeUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\QrCode;\n\n\/**\n * A QR code URI factory that produces URIs pointing to the QR-Server QR code\n * service.\n *\/\nclass QrServerQrCodeUriFactory implements QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    ) {\n        if (null === $size) {\n            $size = 250;\n        }\n        if (null === $errorCorrection) {\n            $errorCorrection = ErrorCorrectionLevel::LOW();\n        }\n\n        $parameters = '';\n        if (250 !== $size) {\n            $parameters .= sprintf(\n                '&size=%sx%s',\n                rawurlencode($size),\n                rawurlencode($size)\n            );\n        }\n        if (ErrorCorrectionLevel::LOW() !== $errorCorrection) {\n            $parameters .=\n                '&ecc=' .\n                rawurlencode($errorCorrection->letterCode());\n        }\n\n        return sprintf(\n            'https:\/\/api.qrserver.com\/v1\/create-qr-code\/?data=%s%s',\n            rawurlencode($data),\n            $parameters\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,1,1,2,1,1,null,2,2,1,1,1,1,1,1,2,null,null,1,1,null,2,2,2,null,2,null,null]},{"name":"Eloquent\/Otis\/Totp\/TotpGenerator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Totp;\n\nuse Eloquent\\Otis\\Hotp\\HotpGenerator;\nuse Eloquent\\Otis\\Hotp\\HotpGeneratorInterface;\nuse Eloquent\\Otis\\Hotp\\HotpValue;\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * Generates TOTP values.\n *\/\nclass TotpGenerator implements TotpGeneratorInterface\n{\n    \/**\n     * Construct a new TOTP generator.\n     *\n     * @param HotpGeneratorInterface|null $generator The HOTP generator to use.\n     * @param Isolator|null               $isolator  The isolator to use.\n     *\/\n    public function __construct(\n        HotpGeneratorInterface $generator = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $generator) {\n            $generator = new HotpGenerator;\n        }\n\n        $this->generator = $generator;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Get the HOTP generator.\n     *\n     * @return HotpGeneratorInterface The generator.\n     *\/\n    public function generator()\n    {\n        return $this->generator;\n    }\n\n    \/**\n     * Generate a TOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc6238#section-4\n     *\n     * @param string       $secret The shared secret.\n     * @param integer|null $window The number of seconds each value is valid for.\n     * @param integer|null $time   The Unix timestamp to generate the password for.\n     *\n     * @return HotpValue\n     *\/\n    public function generate($secret, $window = null, $time = null)\n    {\n        if (null === $window) {\n            $window = 30;\n        }\n        if (null === $time) {\n            $time = $this->isolator()->time();\n        }\n\n        return $this->generator()->generate(\n            $secret,\n            intval(floor($time \/ $window))\n        );\n    }\n\n    \/**\n     * @return Isolator\n     *\/\n    protected function isolator()\n    {\n        return $this->isolator;\n    }\n\n    private $generator;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24,2,2,null,24,24,24,null,null,null,null,null,null,null,null,24,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,19,19,22,1,1,null,22,22,22,22,null,null,null,null,null,null,null,1,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Totp\/TotpGeneratorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Totp;\n\nuse Eloquent\\Otis\\Hotp\\HotpValue;\n\n\/**\n * The interface implemented by TOTP generators.\n *\/\ninterface TotpGeneratorInterface\n{\n    \/**\n     * Generate a TOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc6238#section-4\n     *\n     * @param string       $secret The shared secret.\n     * @param integer|null $window The number of seconds each value is valid for.\n     * @param integer|null $time   The Unix timestamp to generate the password for.\n     *\n     * @return HotpValue\n     *\/\n    public function generate($secret, $window = null, $time = null);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Totp\/TotpValidator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Totp;\n\nuse Eloquent\\Otis\\Hotp\\Exception\\InvalidPasswordLengthException;\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * Validates TOTP passwords.\n *\/\nclass TotpValidator implements TotpValidatorInterface\n{\n    \/**\n     * Construct a new TOTP validator.\n     *\n     * @param TotpGeneratorInterface|null $generator The generator to use.\n     * @param Isolator|null               $isolator  The isolator to use.\n     *\/\n    public function __construct(\n        TotpGeneratorInterface $generator = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $generator) {\n            $generator = new TotpGenerator;\n        }\n\n        $this->generator = $generator;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Get the generator.\n     *\n     * @return TotpGeneratorInterface The generator.\n     *\/\n    public function generator()\n    {\n        return $this->generator;\n    }\n\n    \/**\n     * Validate a TOTP password.\n     *\n     * @param string       $password      The password to validate.\n     * @param string       $secret        The TOTP secret.\n     * @param integer|null $digits        The number of password digits.\n     * @param integer|null $window        The number of seconds each token is valid for.\n     * @param integer|null $pastWindows   The number of past windows to check.\n     * @param integer|null $futureWindows The number of future windows to check.\n     * @param integer|null &$driftWindows Will be set to the number of windows of clock drift.\n     *\n     * @return boolean True if the password is valid.\n     *\/\n    public function validate(\n        $password,\n        $secret,\n        $digits = null,\n        $window = null,\n        $pastWindows = null,\n        $futureWindows = null,\n        &$driftWindows = null\n    ) {\n        $driftWindows = null;\n\n        if (null === $digits) {\n            $digits = 6;\n        }\n        if (null === $window) {\n            $window = 30;\n        }\n        if (null === $pastWindows) {\n            $pastWindows = 1;\n        }\n        if (null === $futureWindows) {\n            $futureWindows = 1;\n        }\n\n        if (strlen($password) !== $digits) {\n            return false;\n        }\n\n        $time = $this->isolator()->time();\n\n        for ($i = -$pastWindows; $i <= $futureWindows; ++$i) {\n            $result = $this->generator()->generate(\n                $secret,\n                $window,\n                $time + ($i * $window)\n            );\n\n            try {\n                $thisPassword = $result->string($digits);\n            } catch (InvalidPasswordLengthException $e) {\n                return false;\n            }\n\n            if ($thisPassword === $password) {\n                $driftWindows = $i;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    \/**\n     * @return Isolator\n     *\/\n    protected function isolator()\n    {\n        return $this->isolator;\n    }\n\n    private $generator;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,11,1,1,null,11,11,11,null,null,null,null,null,null,null,null,10,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9,null,9,1,1,9,9,9,9,6,6,9,6,6,null,9,1,null,null,8,null,8,8,8,8,8,8,null,null,8,8,1,null,null,7,5,null,5,null,6,null,2,null,null,null,null,null,null,null,8,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Totp\/TotpValidatorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Totp;\n\n\/**\n * The interface implemented by TOTP validators.\n *\/\ninterface TotpValidatorInterface\n{\n    \/**\n     * Validate a TOTP password.\n     *\n     * @param string       $password      The password to validate.\n     * @param string       $secret        The TOTP secret.\n     * @param integer|null $digits        The number of password digits.\n     * @param integer|null $window        The number of seconds each token is valid for.\n     * @param integer|null $pastWindows   The number of past windows to check.\n     * @param integer|null $futureWindows The number of future windows to check.\n     * @param integer|null &$driftWindows Will be set to the number of windows of clock drift.\n     *\n     * @return boolean True if the password is valid.\n     *\/\n    public function validate(\n        $password,\n        $secret,\n        $digits = null,\n        $window = null,\n        $pastWindows = null,\n        $futureWindows = null,\n        &$driftWindows = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}