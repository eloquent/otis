{"service_name":"travis-ci","service_job_id":"11310426","git":{"branch":"(detached from 615d2cc)","head":{"id":"615d2cc1e3ca7fb24767da3db548bc25483a5c2e","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Major refactor."},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/otis.git"}]},"run_at":"2013-09-13 05:39:24 +0000","source_files":[{"name":"Eloquent\/Otis\/Configuration\/AbstractOtpConfiguration.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration;\n\n\/**\n * An abstract base class for implementing OTP configurations.\n *\/\nabstract class AbstractOtpConfiguration implements OtpConfigurationInterface\n{\n    \/**\n     * Construct a new OTP configuration.\n     *\n     * @param integer|null       $digits       The number of password digits.\n     * @param integer|null       $secretLength The length of the shared secret.\n     * @param HashAlgorithm|null $algorithm    The underlying algorithm to use.\n     *\n     * @throws Exception\\InvalidPasswordLengthException If the number of digits is invalid.\n     *\/\n    public function __construct(\n        $digits = null,\n        $secretLength = null,\n        HashAlgorithm $algorithm = null\n    ) {\n        if (null === $digits) {\n            $digits = 6;\n        }\n        if (null === $secretLength) {\n            $secretLength = 10;\n        }\n        if (null === $algorithm) {\n            $algorithm = HashAlgorithm::SHA1();\n        }\n\n        if ($digits < 6 || $digits > 10) {\n            throw new Exception\\InvalidPasswordLengthException($digits);\n        }\n\n        $this->digits = $digits;\n        $this->secretLength = $secretLength;\n        $this->algorithm = $algorithm;\n    }\n\n    \/**\n     * Get the number of password digits.\n     *\n     * @return integer The number of digits.\n     *\/\n    public function digits()\n    {\n        return $this->digits;\n    }\n\n    \/**\n     * Get the length of the shared secret.\n     *\n     * @return integer The secret length.\n     *\/\n    public function secretLength()\n    {\n        return $this->secretLength;\n    }\n\n    \/**\n     * Get the underlying algorithm name.\n     *\n     * @return HashAlgorithm The algorithm name.\n     *\/\n    public function algorithm()\n    {\n        return $this->algorithm;\n    }\n\n    private $digits;\n    private $secretLength;\n    private $algorithm;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,2,2,8,6,6,8,6,6,null,8,4,null,null,8,8,8,8,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Configuration\/Exception\/InvalidPasswordLengthException.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration\\Exception;\n\nuse Exception;\n\n\/**\n * The requested password length is invalid.\n *\/\nclass InvalidPasswordLengthException extends Exception\n{\n    \/**\n     * Construct a new invalid password length exception.\n     *\n     * @param integer        $digits   The number of digits requested.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($digits, Exception $previous = null)\n    {\n        $this->digits = $digits;\n\n        parent::__construct(\n            sprintf(\n                'Invalid OTP password length (%s).',\n                var_export($digits, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the requested password length.\n     *\n     * @return integer The length requested.\n     *\/\n    public function digits()\n    {\n        return $this->digits;\n    }\n\n    private $digits;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Otis\/Configuration\/HashAlgorithm.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration;\n\nuse Eloquent\\Enumeration\\Enumeration;\n\n\/**\n * The available hash algorithms.\n *\/\nfinal class HashAlgorithm extends Enumeration\n{\n    \/**\n     * The SHA-1 hash algorithm.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc3174\n     *\/\n    const SHA1 = 'SHA1';\n\n    \/**\n     * The SHA-256 hash algorithm.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc6234\n     *\/\n    const SHA256 = 'SHA256';\n\n    \/**\n     * The SHA-512 hash algorithm.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc6234\n     *\/\n    const SHA512 = 'SHA512';\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Configuration\/HotpConfiguration.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration;\n\n\/**\n * Represents a complete set of HOTP configuration settings.\n *\/\nclass HotpConfiguration extends AbstractOtpConfiguration implements\n    HotpConfigurationInterface\n{\n    \/**\n     * Construct a new HOTP configuration.\n     *\n     * @param integer|null       $digits         The number of password digits.\n     * @param integer|null       $window         The amount of counter increments to search through for a match.\n     * @param integer|null       $initialCounter The initial counter value.\n     * @param integer|null       $secretLength   The length of the shared secret.\n     * @param HashAlgorithm|null $algorithm      The underlying algorithm to use.\n     *\n     * @throws Exception\\InvalidPasswordLengthException If the number of digits is invalid.\n     *\/\n    public function __construct(\n        $digits = null,\n        $window = null,\n        $initialCounter = null,\n        $secretLength = null,\n        HashAlgorithm $algorithm = null\n    ) {\n        if (null === $window) {\n            $window = 10;\n        }\n        if (null === $initialCounter) {\n            $initialCounter = 1;\n        }\n\n        parent::__construct($digits, $secretLength, $algorithm);\n\n        $this->window = $window;\n        $this->initialCounter = $initialCounter;\n    }\n\n    \/**\n     * Get the amount of counter increments to search through for a match.\n     *\n     * @return integer The amount of counter increments to search through for a match.\n     *\/\n    public function window()\n    {\n        return $this->window;\n    }\n\n    \/**\n     * Get the initial counter value.\n     *\n     * @return integer The initial counter value.\n     *\/\n    public function initialCounter()\n    {\n        return $this->initialCounter;\n    }\n\n    private $window;\n    private $initialCounter;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,3,3,4,3,3,null,4,null,4,4,4,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Configuration\/HotpConfigurationInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration;\n\n\/**\n * The interface implemented by HOTP configurations.\n *\/\ninterface HotpConfigurationInterface extends OtpConfigurationInterface\n{\n    \/**\n     * Get the amount of counter increments to search through for a match.\n     *\n     * @return integer The amount of counter increments to search through for a match.\n     *\/\n    public function window();\n\n    \/**\n     * Get the initial counter value.\n     *\n     * @return integer The initial counter value.\n     *\/\n    public function initialCounter();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Configuration\/OtpConfigurationInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration;\n\n\/**\n * The interface implemented by OTP configurations.\n *\/\ninterface OtpConfigurationInterface\n{\n    \/**\n     * Get the number of password digits.\n     *\n     * @return integer The number of digits.\n     *\/\n    public function digits();\n\n    \/**\n     * Get the length of the shared secret.\n     *\n     * @return integer The secret length.\n     *\/\n    public function secretLength();\n\n    \/**\n     * Get the underlying algorithm name.\n     *\n     * @return HashAlgorithm The algorithm name.\n     *\/\n    public function algorithm();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Configuration\/TotpConfiguration.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration;\n\n\/**\n * Represents a complete set of TOTP configuration settings.\n *\/\nclass TotpConfiguration extends AbstractOtpConfiguration implements\n    TotpConfigurationInterface\n{\n    \/**\n     * Construct a new TOTP configuration.\n     *\n     * @param integer|null       $digits        The number of password digits.\n     * @param integer|null       $window        The number of seconds each token is valid for.\n     * @param integer|null       $futureWindows The number of future windows to check.\n     * @param integer|null       $pastWindows   The number of past windows to check.\n     * @param integer|null       $secretLength  The length of the shared secret.\n     * @param HashAlgorithm|null $algorithm     The underlying algorithm to use.\n     *\n     * @throws Exception\\InvalidPasswordLengthException If the number of digits is invalid.\n     *\/\n    public function __construct(\n        $digits = null,\n        $window = null,\n        $futureWindows = null,\n        $pastWindows = null,\n        $secretLength = null,\n        HashAlgorithm $algorithm = null\n    ) {\n        if (null === $window) {\n            $window = 30;\n        }\n        if (null === $futureWindows) {\n            $futureWindows = 1;\n        }\n        if (null === $pastWindows) {\n            $pastWindows = 1;\n        }\n\n        parent::__construct($digits, $secretLength, $algorithm);\n\n        $this->window = $window;\n        $this->futureWindows = $futureWindows;\n        $this->pastWindows = $pastWindows;\n    }\n\n    \/**\n     * Get the number of seconds each token is valid for.\n     *\n     * @return integer The number of seconds each token is valid for.\n     *\/\n    public function window()\n    {\n        return $this->window;\n    }\n\n    \/**\n     * Get the number of future windows to check.\n     *\n     * @return integer The number of future windows to check.\n     *\/\n    public function futureWindows()\n    {\n        return $this->futureWindows;\n    }\n\n    \/**\n     * Get the number of past windows to check.\n     *\n     * @return integer The number of past windows to check.\n     *\/\n    public function pastWindows()\n    {\n        return $this->pastWindows;\n    }\n\n    private $window;\n    private $futureWindows;\n    private $pastWindows;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,3,3,4,3,3,4,3,3,null,4,null,4,4,4,4,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Configuration\/TotpConfigurationInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Configuration;\n\n\/**\n * The interface implemented by TOTP configurations.\n *\/\ninterface TotpConfigurationInterface extends OtpConfigurationInterface\n{\n    \/**\n     * Get the number of seconds each token is valid for.\n     *\n     * @return integer The number of seconds each token is valid for.\n     *\/\n    public function window();\n\n    \/**\n     * Get the number of future windows to check.\n     *\n     * @return integer The number of future windows to check.\n     *\/\n    public function futureWindows();\n\n    \/**\n     * Get the number of past windows to check.\n     *\n     * @return integer The number of past windows to check.\n     *\/\n    public function pastWindows();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Generator\/HotpGenerator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Generator;\n\nuse Eloquent\\Otis\\Configuration\\HashAlgorithm;\n\n\/**\n * Generates HOTP values.\n *\/\nclass HotpGenerator implements HotpGeneratorInterface\n{\n    \/**\n     * Generate an HOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @param string             $secret  The shared secret.\n     * @param integer            $counter The counter value.\n     * @param HashAlgorithm|null $algorithm The hash algorithm to use.\n     *\n     * @return OtpValueInterface The generated HOTP value.\n     *\/\n    public function generate($secret, $counter, HashAlgorithm $algorithm = null)\n    {\n        if (null === $algorithm) {\n            $algorithm = HashAlgorithm::SHA1();\n        }\n\n        return new OtpValue(\n            hash_hmac($algorithm->value(), $this->pack($counter), $secret, true)\n        );\n    }\n\n    \/**\n     * Pack a 64-bit integer into a binary representation.\n     *\n     * @param integer $integer The integer to pack.\n     *\n     * @return string The binary representation.\n     *\/\n    protected function pack($integer)\n    {\n        $highPart = ($integer & 0xffffffff00000000) >> 32;\n        $lowPart  = ($integer & 0x00000000ffffffff);\n\n        return pack('N2', $highPart, $lowPart);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30,10,10,null,30,30,30,null,null,null,null,null,null,null,null,null,null,null,30,30,null,30,null,null]},{"name":"Eloquent\/Otis\/Generator\/HotpGeneratorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Generator;\n\nuse Eloquent\\Otis\\Configuration\\HashAlgorithm;\n\n\/**\n * The interface implemented by HOTP generators.\n *\/\ninterface HotpGeneratorInterface\n{\n    \/**\n     * Generate an HOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @param string             $secret  The shared secret.\n     * @param integer            $counter The counter value.\n     * @param HashAlgorithm|null $algorithm The hash algorithm to use.\n     *\n     * @return OtpValueInterface The generated HOTP value.\n     *\/\n    public function generate(\n        $secret,\n        $counter,\n        HashAlgorithm $algorithm = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Generator\/OtpValue.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Generator;\n\nuse Eloquent\\Otis\\Configuration\\Exception\\InvalidPasswordLengthException;\n\n\/**\n * Represents a generated OTP value.\n *\/\nclass OtpValue implements OtpValueInterface\n{\n    \/**\n     * Construct a new OTP value.\n     *\n     * @param string $value The raw value.\n     *\/\n    public function __construct($value)\n    {\n        $this->value = $value;\n        $this->truncated = $this->truncate($value);\n    }\n\n    \/**\n     * Get the raw value.\n     *\n     * @return string The raw value.\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * Get the truncated value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @return integer The truncated value.\n     *\/\n    public function truncated()\n    {\n        return $this->truncated;\n    }\n\n    \/**\n     * Generate a numeric string with a fixed number of digits from the result.\n     *\n     * @param integer|null $digits The number of digits in the result string.\n     *\n     * @return string                         The result string.\n     * @throws InvalidPasswordLengthException If the requested length is invalid.\n     *\/\n    public function string($digits = null)\n    {\n        if (null === $digits) {\n            $digits = 6;\n        }\n        if ($digits < 6 || $digits > 10) {\n            throw new InvalidPasswordLengthException($digits);\n        }\n\n        return substr(\n            str_pad(\n                strval($this->truncated()),\n                $digits,\n                '0',\n                STR_PAD_LEFT\n            ),\n            -1 * $digits\n        );\n    }\n\n    \/**\n     * Generate a numeric string with 6 digits from the result.\n     *\n     * @return string The result string.\n     *\/\n    public function __toString()\n    {\n        return $this->string(6);\n    }\n\n    \/**\n     * Truncate the supplied value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @param string $value The value to truncate.\n     *\n     * @return integer The truncated value.\n     *\/\n    protected function truncate($value)\n    {\n        $value = bin2hex($value);\n        $parts = str_split($value, 2);\n\n        foreach ($parts as $i => $part) {\n            $parts[$i] = hexdec($part);\n        }\n\n        $offset = $parts[count($parts) - 1] & 0xf;\n\n        return\n            (($parts[$offset] & 0x7f) << 24) |\n            (($parts[$offset + 1] & 0xff) << 16) |\n            (($parts[$offset + 2] & 0xff) << 8) |\n            ($parts[$offset + 3] & 0xff)\n        ;\n    }\n\n    private $value;\n    private $truncated;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,11,11,11,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,null,null,null,null,null,10,1,1,10,2,null,null,8,8,8,8,8,null,8,null,8,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,11,11,null,11,11,11,null,11,null,null,11,11,11,11,11,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Generator\/OtpValueInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Generator;\n\nuse Eloquent\\Otis\\Configuration\\Exception\\InvalidPasswordLengthException;\n\n\/**\n * The interface implemented by generated OTP values.\n *\/\ninterface OtpValueInterface\n{\n    \/**\n     * Get the raw value.\n     *\n     * @return string The raw value.\n     *\/\n    public function value();\n\n    \/**\n     * Get the truncated value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc4226#section-5.3\n     *\n     * @return integer The truncated value.\n     *\/\n    public function truncated();\n\n    \/**\n     * Generate a numeric string with a fixed number of digits from the result.\n     *\n     * @param integer|null $digits The number of digits in the result string.\n     *\n     * @return string                         The result string.\n     * @throws InvalidPasswordLengthException If the requested length is invalid.\n     *\/\n    public function string($digits = null);\n\n    \/**\n     * Generate a numeric string with 6 digits from the result.\n     *\n     * @return string The result string.\n     *\/\n    public function __toString();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Generator\/TotpGenerator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Generator;\n\nuse Eloquent\\Otis\\Configuration\\HashAlgorithm;\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * Generates TOTP values.\n *\/\nclass TotpGenerator implements TotpGeneratorInterface\n{\n    \/**\n     * Construct a new TOTP generator.\n     *\n     * @param HotpGeneratorInterface|null $generator The HOTP generator to use.\n     * @param Isolator|null               $isolator  The isolator to use.\n     *\/\n    public function __construct(\n        HotpGeneratorInterface $generator = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $generator) {\n            $generator = new HotpGenerator;\n        }\n\n        $this->generator = $generator;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Get the HOTP generator.\n     *\n     * @return HotpGeneratorInterface The HOTP generator.\n     *\/\n    public function generator()\n    {\n        return $this->generator;\n    }\n\n    \/**\n     * Generate a TOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc6238#section-4\n     *\n     * @param string             $secret    The shared secret.\n     * @param integer|null       $window    The number of seconds each value is valid for.\n     * @param integer|null       $time      The Unix timestamp to generate the password for.\n     * @param HashAlgorithm|null $algorithm The hash algorithm to use.\n     *\n     * @return OtpValueInterface The generated TOTP value.\n     *\/\n    public function generate(\n        $secret,\n        $window = null,\n        $time = null,\n        HashAlgorithm $algorithm = null\n    ) {\n        if (null === $window) {\n            $window = 30;\n        }\n        if (null === $time) {\n            $time = $this->isolator()->time();\n        }\n\n        return $this->generator()->generate(\n            $secret,\n            intval(floor($time \/ $window)),\n            $algorithm\n        );\n    }\n\n    \/**\n     * Get the isolator.\n     *\n     * @return Isolator The isolator.\n     *\/\n    protected function isolator()\n    {\n        return $this->isolator;\n    }\n\n    private $generator;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24,1,1,null,24,24,24,null,null,null,null,null,null,null,null,24,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,22,19,19,22,1,1,null,22,22,22,null,22,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Generator\/TotpGeneratorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Generator;\n\nuse Eloquent\\Otis\\Configuration\\HashAlgorithm;\n\n\/**\n * The interface implemented by TOTP generators.\n *\/\ninterface TotpGeneratorInterface\n{\n    \/**\n     * Generate a TOTP value.\n     *\n     * @link http:\/\/tools.ietf.org\/html\/rfc6238#section-4\n     *\n     * @param string             $secret    The shared secret.\n     * @param integer|null       $window    The number of seconds each value is valid for.\n     * @param integer|null       $time      The Unix timestamp to generate the password for.\n     * @param HashAlgorithm|null $algorithm The hash algorithm to use.\n     *\n     * @return OtpValueInterface The generated TOTP value.\n     *\/\n    public function generate(\n        $secret,\n        $window = null,\n        $time = null,\n        HashAlgorithm $lagorithm = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Uri\/GoogleAuthenticator\/GoogleAuthenticatorUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Uri\\GoogleAuthenticator;\n\nuse Base32\\Base32;\nuse Eloquent\\Otis\\Configuration\\HashAlgorithm;\nuse Eloquent\\Otis\\Configuration\\HotpConfigurationInterface;\nuse Eloquent\\Otis\\Configuration\\OtpConfigurationInterface;\nuse Eloquent\\Otis\\Configuration\\TotpConfigurationInterface;\n\n\/**\n * Generates URIs for use with Google Authenticator, and other compatible OTP\n * apps.\n *\/\nclass GoogleAuthenticatorUriFactory implements\n    GoogleAuthenticatorUriFactoryInterface\n{\n    \/**\n     * Create a TOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param TotpConfigurationInterface $configuration The TOTP configuration.\n     * @param string                     $secret        The shared secret.\n     * @param string                     $label         The label for the account.\n     * @param string|null                $issuer        The issuer name.\n     * @param boolean|null               $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The TOTP URI.\n     *\/\n    public function createTotpUri(\n        TotpConfigurationInterface $configuration,\n        $secret,\n        $label,\n        $issuer = null,\n        $issuerInLabel = null\n    ) {\n        if (30 === $configuration->window()) {\n            $parameters = '';\n        } else {\n            $parameters = '&period=' . rawurlencode($configuration->window());\n        }\n\n        return $this->createUri(\n            'totp',\n            $parameters,\n            $configuration,\n            $secret,\n            $label,\n            $issuer,\n            $issuerInLabel\n        );\n    }\n\n    \/**\n     * Create a HOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param HotpConfigurationInterface $configuration The HOTP configuration.\n     * @param string                     $secret        The shared secret.\n     * @param string                     $label         The label for the account.\n     * @param integer|null               $counter       The current counter value.\n     * @param string|null                $issuer        The issuer name.\n     * @param boolean|null               $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The HOTP URI.\n     *\/\n    public function createHotpUri(\n        HotpConfigurationInterface $configuration,\n        $secret,\n        $label,\n        $counter = null,\n        $issuer = null,\n        $issuerInLabel = null\n    ) {\n        if (null === $counter || 1 === $counter) {\n            $parameters = '';\n        } else {\n            $parameters = '&counter=' . rawurlencode($counter);\n        }\n\n        return $this->createUri(\n            'hotp',\n            $parameters,\n            $configuration,\n            $secret,\n            $label,\n            $issuer,\n            $issuerInLabel\n        );\n    }\n\n    \/**\n     * Create an OTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param string                    $type          The otp type identifier.\n     * @param string                    $parameters    Additional URI parameters.\n     * @param OtpConfigurationInterface $configuration The OTP configuration.\n     * @param string                    $secret        The shared secret.\n     * @param string                    $label         The label for the account.\n     * @param string|null               $issuer        The issuer name.\n     * @param boolean|null              $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The OTP URI.\n     *\/\n    protected function createUri(\n        $type,\n        $parameters,\n        OtpConfigurationInterface $configuration,\n        $secret,\n        $label,\n        $issuer = null,\n        $issuerInLabel = null\n    ) {\n        if (null === $issuerInLabel) {\n            $issuerInLabel = false;\n        }\n\n        if (6 !== $configuration->digits()) {\n            $parameters .= '&digits=' . rawurlencode($configuration->digits());\n        }\n\n        if (HashAlgorithm::SHA1() !== $configuration->algorithm()) {\n            $parameters .= '&algorithm=' . rawurlencode(\n                $configuration->algorithm()->value()\n            );\n        }\n\n        $legacyIssuer = '';\n        if (null !== $issuer) {\n            if ($issuerInLabel) {\n                $legacyIssuer = rawurlencode($issuer) . ':';\n            }\n\n            $parameters .= '&issuer=' . rawurlencode($issuer);\n        }\n\n        return sprintf(\n            'otpauth:\/\/%s\/%s%s?secret=%s%s',\n            rawurlencode($type),\n            $legacyIssuer,\n            rawurlencode($label),\n            rawurlencode(Base32::encode($secret)),\n            $parameters\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,1,1,2,null,null,3,3,3,3,3,3,3,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,1,1,2,null,null,3,3,3,3,3,3,3,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,2,2,null,6,4,4,null,6,4,4,4,4,null,6,6,4,2,2,null,4,4,null,6,6,6,6,6,6,null,6,null,null]},{"name":"Eloquent\/Otis\/Uri\/GoogleAuthenticator\/GoogleAuthenticatorUriFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Uri\\GoogleAuthenticator;\n\nuse Eloquent\\Otis\\Configuration\\HotpConfigurationInterface;\nuse Eloquent\\Otis\\Configuration\\TotpConfigurationInterface;\n\n\/**\n * The interface implemented by Google Authenticator URI factories.\n *\/\ninterface GoogleAuthenticatorUriFactoryInterface\n{\n    \/**\n     * Create a TOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param TotpConfigurationInterface $configuration The TOTP configuration.\n     * @param string                     $secret        The shared secret.\n     * @param string                     $label         The label for the account.\n     * @param string|null                $issuer        The issuer name.\n     * @param boolean|null               $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The TOTP URI.\n     *\/\n    public function createTotpUri(\n        TotpConfigurationInterface $configuration,\n        $secret,\n        $label,\n        $issuer = null,\n        $issuerInLabel = null\n    );\n\n    \/**\n     * Create a HOTP URI for use with Google Authenticator.\n     *\n     * Note that this is not a URI for the QR code used by Google Authenticator.\n     * The URI produced by this method is used as the actual content of the QR\n     * code, and follows a special set of conventions understood by Google\n     * Authenticator, and other OTP apps.\n     *\n     * @param HotpConfigurationInterface $configuration The HOTP configuration.\n     * @param string                     $secret        The shared secret.\n     * @param string                     $label         The label for the account.\n     * @param integer|null               $counter       The current counter value.\n     * @param string|null                $issuer        The issuer name.\n     * @param boolean|null               $issuerInLabel True if legacy issuer support should be enabled by prefixing the label with the issuer name.\n     *\n     * @return string The HOTP URI.\n     *\/\n    public function createHotpUri(\n        HotpConfigurationInterface $configuration,\n        $secret,\n        $label,\n        $counter = null,\n        $issuer = null,\n        $issuerInLabel = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Uri\/QrCode\/ErrorCorrectionLevel.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Uri\\QrCode;\n\nuse Eloquent\\Enumeration\\Multiton;\n\n\/**\n * The available error correction levels for QR codes.\n *\/\nfinal class ErrorCorrectionLevel extends Multiton\n{\n    \/**\n     * Get the letter code.\n     *\n     * @return string The letter code.\n     *\/\n    public function letterCode()\n    {\n        return $this->letterCode;\n    }\n\n    \/**\n     * Get the number code.\n     *\n     * @return integer The number code.\n     *\/\n    public function numberCode()\n    {\n        return $this->numberCode;\n    }\n\n    protected static function initializeMembers()\n    {\n        \/\/ Allows recovery of up to 7% data loss.\n        new static('LOW', 'L', 1);\n        \/\/ Allows recovery of up to 15% data loss.\n        new static('MEDIUM', 'M', 2);\n        \/\/ Allows recovery of up to 25% data loss.\n        new static('QUARTILE', 'Q', 3);\n        \/\/ Allows recovery of up to 30% data loss.\n        new static('HIGH', 'H', 4);\n    }\n\n    \/**\n     * @param string  $key\n     * @param string  $letterCode\n     * @param integer $numberCode\n     *\/\n    protected function __construct($key, $letterCode, $numberCode)\n    {\n        parent::__construct($key);\n\n        $this->letterCode = $letterCode;\n        $this->numberCode = $numberCode;\n    }\n\n    private $letterCode;\n    private $numberCode;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,3,null,3,null,3,null,3,3,null,null,null,null,null,null,null,null,3,null,3,3,3,null,null,null,null]},{"name":"Eloquent\/Otis\/Uri\/QrCode\/GoogleChartsQrCodeUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Uri\\QrCode;\n\n\/**\n * A QR code URI factory that produces Google Charts URIs.\n *\/\nclass GoogleChartsQrCodeUriFactory implements QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    ) {\n        if (null === $size) {\n            $size = 250;\n        }\n        if (null === $errorCorrection) {\n            $errorCorrection = ErrorCorrectionLevel::LOW();\n        }\n\n        if (ErrorCorrectionLevel::LOW() === $errorCorrection) {\n            $errorCorrectionString = '';\n        } else {\n            $errorCorrectionString = $errorCorrection->letterCode();\n        }\n\n        return sprintf(\n            'https:\/\/chart.googleapis.com\/chart?cht=qr' .\n                '&chs=%sx%s&chld=%s%%7C0&chl=%s',\n            rawurlencode($size),\n            rawurlencode($size),\n            $errorCorrectionString,\n            rawurlencode($data)\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,1,1,2,1,1,null,2,1,1,1,null,null,2,null,2,2,2,2,2,2,null,null]},{"name":"Eloquent\/Otis\/Uri\/QrCode\/KaywaQrCodeUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Uri\\QrCode;\n\n\/**\n * A QR code URI factory that produces URIs pointing to the Kaywa QR code\n * service.\n *\/\nclass KaywaQrCodeUriFactory implements QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    ) {\n        if (null === $size) {\n            $size = 8;\n        }\n        if (null === $errorCorrection) {\n            $errorCorrection = ErrorCorrectionLevel::LOW();\n        }\n\n        $parameters = '';\n        if (8 !== $size) {\n            $parameters .= '&s=' . rawurlencode($size);\n        }\n        if (ErrorCorrectionLevel::MEDIUM() !== $errorCorrection) {\n            $parameters .= '&l=' . rawurlencode($errorCorrection->numberCode());\n        }\n\n        return sprintf(\n            'http:\/\/qrfree.kaywa.com\/?d=%s%s',\n            rawurlencode($data),\n            $parameters\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,1,1,2,1,1,null,2,2,1,1,2,2,2,null,2,2,2,null,2,null,null]},{"name":"Eloquent\/Otis\/Uri\/QrCode\/QrCodeUriFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Uri\\QrCode;\n\n\/**\n * The interface implemented by QR code URI factories.\n *\/\ninterface QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Uri\/QrCode\/QrServerQrCodeUriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Uri\\QrCode;\n\n\/**\n * A QR code URI factory that produces URIs pointing to the QR-Server QR code\n * service.\n *\/\nclass QrServerQrCodeUriFactory implements QrCodeUriFactoryInterface\n{\n    \/**\n     * Create a URI that will generate a QR code with the supplied values.\n     *\n     * @param string                    $data            The data to encode.\n     * @param integer|null              $size            The size of the QR code. The units are implementation dependant.\n     * @param ErrorCorrectionLevel|null $errorCorrection The level of error correction to use.\n     *\n     * @return string The QR code URI.\n     *\/\n    public function createUri(\n        $data,\n        $size = null,\n        ErrorCorrectionLevel $errorCorrection = null\n    ) {\n        if (null === $size) {\n            $size = 250;\n        }\n        if (null === $errorCorrection) {\n            $errorCorrection = ErrorCorrectionLevel::LOW();\n        }\n\n        $parameters = '';\n        if (250 !== $size) {\n            $parameters .= sprintf(\n                '&size=%sx%s',\n                rawurlencode($size),\n                rawurlencode($size)\n            );\n        }\n        if (ErrorCorrectionLevel::LOW() !== $errorCorrection) {\n            $parameters .=\n                '&ecc=' .\n                rawurlencode($errorCorrection->letterCode());\n        }\n\n        return sprintf(\n            'https:\/\/api.qrserver.com\/v1\/create-qr-code\/?data=%s%s',\n            rawurlencode($data),\n            $parameters\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,1,1,2,1,1,null,2,2,1,1,1,1,1,1,2,null,null,1,1,null,2,2,2,null,2,null,null]},{"name":"Eloquent\/Otis\/Validator\/Exception\/OtpParametersTypeMismatchException.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Exception;\n\nuse Eloquent\\Otis\\Validator\\Parameters\\OtpParametersInterface;\nuse Exception;\n\n\/**\n * The supplied OTP validation parameters do not match the type required by the\n * validator.\n *\/\nclass OtpParametersTypeMismatchException extends Exception\n{\n    \/**\n     * Construct a new OTP parameters type mismatch exception.\n     *\n     * @param string                 $requiredType The required parameters type.\n     * @param OtpParametersInterface $parameters   The supplied parameters.\n     * @param Exception|null         $previous     The cause, if available.\n     *\/\n    public function __construct(\n        $requiredType,\n        OtpParametersInterface $parameters,\n        Exception $previous = null\n    ) {\n        $this->requiredType = $requiredType;\n        $this->parameters = $parameters;\n\n        parent::__construct(\n            sprintf(\n                'Unexpected OTP parameters type %s, expected %s.',\n                var_export(get_class($parameters), true),\n                var_export($requiredType, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the required parameters type.\n     *\n     * @return string The required parameters type.\n     *\/\n    public function requiredType()\n    {\n        return $this->requiredType;\n    }\n\n    \/**\n     * Get the supplied parameters.\n     *\n     * @return OtpParametersInterface The supplied parameters.\n     *\/\n    public function parameters()\n    {\n        return $this->parameters;\n    }\n\n    private $requiredType;\n    private $parameters;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Exception\/UnsupportedOtpConfigurationException.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Exception;\n\nuse Eloquent\\Otis\\Configuration\\OtpConfigurationInterface;\nuse Exception;\n\n\/**\n * An unsupported OTP configuration was supplied.\n *\/\nclass UnsupportedOtpConfigurationException extends Exception\n{\n    \/**\n     * Construct a new unsupported OTP configuration exception.\n     *\n     * @param OtpConfigurationInterface $configuration The supplied configuration.\n     * @param Exception|null            $previous      The cause, if available.\n     *\/\n    public function __construct(\n        OtpConfigurationInterface $configuration,\n        Exception $previous = null\n    ) {\n        $this->configuration = $configuration;\n\n        parent::__construct(\n            sprintf(\n                'OTP configuration of type %s is not supported.',\n                var_export(get_class($configuration), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the supplied configuration.\n     *\n     * @return OtpConfigurationInterface The supplied configuration.\n     *\/\n    public function configuration()\n    {\n        return $this->configuration;\n    }\n\n    private $configuration;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/HotpValidator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator;\n\nuse Eloquent\\Otis\\Configuration\\HotpConfiguration;\nuse Eloquent\\Otis\\Configuration\\HotpConfigurationInterface;\nuse Eloquent\\Otis\\Generator\\Exception\\InvalidPasswordLengthException;\nuse Eloquent\\Otis\\Generator\\HotpGenerator;\nuse Eloquent\\Otis\\Generator\\HotpGeneratorInterface;\n\n\/**\n * Validates HOTP passwords.\n *\/\nclass HotpValidator implements HotpValidatorInterface\n{\n    \/**\n     * Construct a new HOTP validator.\n     *\n     * @param HotpGeneratorInterface|null $generator The generator to use.\n     *\/\n    public function __construct(HotpGeneratorInterface $generator = null)\n    {\n        if (null === $generator) {\n            $generator = new HotpGenerator;\n        }\n\n        $this->generator = $generator;\n    }\n\n    \/**\n     * Get the generator.\n     *\n     * @return HotpGeneratorInterface The generator.\n     *\/\n    public function generator()\n    {\n        return $this->generator;\n    }\n\n    \/**\n     * Validate an HOTP password.\n     *\n     * @param HotpConfigurationInterface         $configuration The configuration to use for validation.\n     * @param Parameters\\HotpParametersInterface $parameters    The parameters to validate.\n     *\n     * @return Result\\HotpValidationResultInterface The validation result.\n     *\/\n    public function validate(\n        HotpConfigurationInterface $configuration,\n        Parameters\\HotpParametersInterface $parameters\n    ) {\n        if (strlen($parameters->password()) !== $configuration->digits()) {\n            return new Result\\HotpValidationResult(\n                Result\\ValidationResultType::PASSWORD_LENGTH_MISMATCH()\n            );\n        }\n\n        for (\n            $counter = $parameters->counter();\n            $counter <= $parameters->counter() + $configuration->window();\n            ++$counter\n        ) {\n            $value = $this->generator()->generate(\n                $parameters->secret(),\n                $counter,\n                $configuration->algorithm()\n            );\n\n            if (\n                $parameters->password() === $value->string(\n                    $configuration->digits()\n                )\n            ) {\n                return new Result\\HotpValidationResult(\n                    Result\\ValidationResultType::VALID(),\n                    $counter + 1\n                );\n            }\n        }\n\n        return new Result\\HotpValidationResult(\n            Result\\ValidationResultType::INVALID_PASSWORD()\n        );\n    }\n\n    \/**\n     * Validate a sequence of HOTP passwords.\n     *\n     * @param HotpConfigurationInterface $configuration The configuration to use for validation.\n     * @param string                     $secret        The shared secret.\n     * @param array<string>              $passwords     The password sequence to validate.\n     * @param integer                    $counter       The current counter value.\n     *\n     * @return Result\\HotpValidationResultInterface The validation result.\n     *\/\n    public function validateSequence(\n        HotpConfigurationInterface $configuration,\n        $secret,\n        array $passwords,\n        $counter\n    ) {\n        if (count($passwords) < 1) {\n            return new Result\\HotpValidationResult(\n                Result\\ValidationResultType::EMPTY_PASSWORD_SEQUENCE()\n            );\n        }\n\n        $first = true;\n        foreach ($passwords as $password) {\n            if ($first) {\n                $window = $configuration->window();\n            } else {\n                $window = 0;\n            }\n\n            $result = $this->validate(\n                new HotpConfiguration(\n                    $configuration->digits(),\n                    $window,\n                    $configuration->initialCounter(),\n                    $configuration->secretLength(),\n                    $configuration->algorithm()\n                ),\n                new Parameters\\HotpParameters($secret, $password, $counter)\n            );\n\n            if (!$result->isSuccessful()) {\n                break;\n            }\n\n            $counter = $result->counter();\n            $first = false;\n        }\n\n        return $result;\n    }\n\n    private $generator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26,19,19,null,26,26,null,null,null,null,null,null,null,null,10,null,null,null,null,null,null,null,null,null,null,null,null,null,null,10,2,2,2,null,null,null,8,8,null,6,8,8,8,8,8,null,null,8,8,8,8,5,5,null,5,null,6,null,4,4,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,1,1,1,null,null,5,5,5,5,5,3,null,null,5,5,5,5,5,5,5,5,5,5,null,5,3,null,null,3,3,5,null,5,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/HotpValidatorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator;\n\nuse Eloquent\\Otis\\Configuration\\HotpConfigurationInterface;\n\n\/**\n * The interface implemented by HOTP validators.\n *\/\ninterface HotpValidatorInterface\n{\n    \/**\n     * Validate an HOTP password.\n     *\n     * @param HotpConfigurationInterface         $configuration The configuration to use for validation.\n     * @param Parameters\\HotpParametersInterface $parameters    The parameters to validate.\n     *\n     * @return Result\\HotpValidationResultInterface The validation result.\n     *\/\n    public function validate(\n        HotpConfigurationInterface $configuration,\n        Parameters\\HotpParametersInterface $parameters\n    );\n\n    \/**\n     * Validate a sequence of HOTP passwords.\n     *\n     * @param HotpConfigurationInterface $configuration The configuration to use for validation.\n     * @param string                     $secret        The shared secret.\n     * @param array<string>              $passwords     The password sequence to validate.\n     * @param integer                    $counter       The current counter value.\n     *\n     * @return Result\\HotpValidationResultInterface The validation result.\n     *\/\n    public function validateSequence(\n        HotpConfigurationInterface $configuration,\n        $secret,\n        array $passwords,\n        $counter\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/OtpValidator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator;\n\nuse Eloquent\\Otis\\Configuration\\HotpConfigurationInterface;\nuse Eloquent\\Otis\\Configuration\\OtpConfigurationInterface;\nuse Eloquent\\Otis\\Configuration\\TotpConfigurationInterface;\nuse Eloquent\\Otis\\Validator\\HotpValidatorInterface;\nuse Eloquent\\Otis\\Validator\\TotpValidator;\nuse Eloquent\\Otis\\Validator\\TotpValidatorInterface;\n\n\/**\n * A generic OTP validator supporting both TOTP and HOTP validation.\n *\/\nclass OtpValidator implements OtpValidatorInterface\n{\n    \/**\n     * Construct a new generic OTP validator.\n     *\n     * @param TotpValidatorInterface|null $totpValidator The TOTP validator to use.\n     * @param HotpValidatorInterface|null $hotpValidator The HOTP validator to use.\n     *\/\n    public function __construct(\n        TotpValidatorInterface $totpValidator = null,\n        HotpValidatorInterface $hotpValidator = null\n    ) {\n        if (null === $totpValidator) {\n            $totpValidator = new TotpValidator;\n        }\n        if (null === $hotpValidator) {\n            $hotpValidator = new HotpValidator;\n        }\n\n        $this->totpValidator = $totpValidator;\n        $this->hotpValidator = $hotpValidator;\n    }\n\n    \/**\n     * Get the TOTP validator.\n     *\n     * @return TotpValidatorInterface The TOTP validator.\n     *\/\n    public function totpValidator()\n    {\n        return $this->totpValidator;\n    }\n\n    \/**\n     * Get the HOTP validator.\n     *\n     * @return HotpValidatorInterface The HOTP validator.\n     *\/\n    public function hotpValidator()\n    {\n        return $this->hotpValidator;\n    }\n\n    \/**\n     * Validate an OTP password.\n     *\n     * @param OtpConfigurationInterface         $configuration The configuration to use for validation.\n     * @param Parameters\\OtpParametersInterface $parameters    The parameters to validate.\n     *\n     * @return Result\\OtpValidationResultInterface            The validation result.\n     * @throws Exception\\UnsupportedOtpConfigurationException If the OTP configuration is not supported.\n     * @throws Exception\\OtpParametersTypeMismatchException   If the OTP parameters are the wrong type for the validator.\n     *\/\n    public function validate(\n        OtpConfigurationInterface $configuration,\n        Parameters\\OtpParametersInterface $parameters\n    ) {\n        if ($configuration instanceof TotpConfigurationInterface) {\n            if (!$parameters instanceof Parameters\\TotpParametersInterface) {\n                throw new Exception\\OtpParametersTypeMismatchException(\n                    __NAMESPACE__ . '\\Parameters\\TotpParametersInterface',\n                    $parameters\n                );\n            }\n\n            return $this->totpValidator()->validate(\n                $configuration,\n                $parameters\n            );\n        } elseif ($configuration instanceof HotpConfigurationInterface) {\n            if (!$parameters instanceof Parameters\\HotpParametersInterface) {\n                throw new Exception\\OtpParametersTypeMismatchException(\n                    __NAMESPACE__ . '\\Parameters\\HotpParametersInterface',\n                    $parameters\n                );\n            }\n\n            return $this->hotpValidator()->validate(\n                $configuration,\n                $parameters\n            );\n        }\n\n        throw new Exception\\UnsupportedOtpConfigurationException(\n            $configuration\n        );\n    }\n\n    private $totpValidator;\n    private $hotpValidator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,18,1,1,18,1,1,null,18,18,18,null,null,null,null,null,null,null,null,10,null,null,null,null,null,null,null,null,null,7,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16,9,1,1,null,1,null,null,8,8,null,8,7,6,1,1,null,1,null,null,5,5,null,5,null,null,1,null,1,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/OtpValidatorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator;\n\nuse Eloquent\\Otis\\Configuration\\OtpConfigurationInterface;\n\n\/**\n * The interface implemented by generic OTP validators.\n *\/\ninterface OtpValidatorInterface\n{\n    \/**\n     * Validate an OTP password.\n     *\n     * @param OtpConfigurationInterface         $configuration The configuration to use for validation.\n     * @param Parameters\\OtpParametersInterface $parameters    The parameters to validate.\n     *\n     * @return Result\\OtpValidationResultInterface            The validation result.\n     * @throws Exception\\UnsupportedOtpConfigurationException If the OTP configuration is not supported.\n     * @throws Exception\\OtpParametersTypeMismatchException   If the OTP parameters are the wrong type for the validator.\n     *\/\n    public function validate(\n        OtpConfigurationInterface $configuration,\n        Parameters\\OtpParametersInterface $parameters\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Parameters\/AbstractOtpParameters.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Parameters;\n\n\/**\n * An abstract base class for implementing OTP validation parameters.\n *\/\nabstract class AbstractOtpParameters implements OtpParametersInterface\n{\n    \/**\n     * Construct a new OTP validation parameters instance.\n     *\n     * @param string $secret   The shared secret.\n     * @param string $password The password.\n     *\/\n    public function __construct($secret, $password)\n    {\n        $this->secret = $secret;\n        $this->password = $password;\n    }\n\n    \/**\n     * Get the shared secret.\n     *\n     * @return string The shared secret.\n     *\/\n    public function secret()\n    {\n        return $this->secret;\n    }\n\n    \/**\n     * Get the password.\n     *\n     * @return string The password.\n     *\/\n    public function password()\n    {\n        return $this->password;\n    }\n\n    private $secret;\n    private $password;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Parameters\/HotpParameters.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Parameters;\n\n\/**\n * Represents HOTP validation parameters.\n *\/\nclass HotpParameters extends AbstractOtpParameters implements\n    HotpParametersInterface\n{\n    \/**\n     * Construct a new HOTP validation parameters instance.\n     *\n     * @param string  $secret   The shared secret.\n     * @param string  $password The password.\n     * @param integer $counter  The current counter value.\n     *\/\n    public function __construct($secret, $password, $counter)\n    {\n        parent::__construct($secret, $password);\n\n        $this->counter = $counter;\n    }\n\n    \/**\n     * Get the current counter value.\n     *\n     * @return integer The current counter value.\n     *\/\n    public function counter()\n    {\n        return $this->counter;\n    }\n\n    private $counter;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Parameters\/HotpParametersInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Parameters;\n\n\/**\n * The interface implemented by HOTP validation parameters.\n *\/\ninterface HotpParametersInterface extends OtpParametersInterface\n{\n    \/**\n     * Get the current counter value.\n     *\n     * @return integer The current counter value.\n     *\/\n    public function counter();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Parameters\/OtpParametersInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Parameters;\n\n\/**\n * The interface implemented by OTP validation parameters.\n *\/\ninterface OtpParametersInterface\n{\n    \/**\n     * Get the shared secret.\n     *\n     * @return string The shared secret.\n     *\/\n    public function secret();\n\n    \/**\n     * Get the password.\n     *\n     * @return string The password.\n     *\/\n    public function password();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Parameters\/TotpParameters.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Parameters;\n\n\/**\n * Represents TOTP validation parameters.\n *\/\nclass TotpParameters extends AbstractOtpParameters implements\n    TotpParametersInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Parameters\/TotpParametersInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Parameters;\n\n\/**\n * The interface implemented by TOTP validation parameters.\n *\/\ninterface TotpParametersInterface extends OtpParametersInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/AbstractOtpValidationResult.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result;\n\n\/**\n * An abstract base class for implementing OTP results.\n *\/\nabstract class AbstractOtpValidationResult implements\n    OtpValidationResultInterface\n{\n    \/**\n     * Construct a new OTP validation result.\n     *\n     * @param ValidationResultType $type The result type.\n     *\/\n    public function __construct(ValidationResultType $type)\n    {\n        $this->type = $type;\n    }\n\n    \/**\n     * Get the result type.\n     *\n     * @return ValidationResultType The result type.\n     *\/\n    public function type()\n    {\n        return $this->type;\n    }\n\n    \/**\n     * Returns true if this result is a successful result.\n     *\n     * @return boolean True if this result is a successful result.\n     *\/\n    public function isSuccessful()\n    {\n        return ValidationResultType::VALID() === $this->type();\n    }\n\n    private $type;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,4,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/Exception\/InvalidResultException.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result\\Exception;\n\nuse Exception;\n\n\/**\n * The supplied OTP validation result arguments constitute an invalid result.\n *\/\nclass InvalidResultException extends Exception\n{\n    \/**\n     * Construct a new invalid result exception.\n     *\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        parent::__construct('Invalid OTP validation result.', 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/HotpValidationResult.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result;\n\n\/**\n * Represents a HOTP validation result.\n *\/\nclass HotpValidationResult extends AbstractOtpValidationResult implements\n    HotpValidationResultInterface\n{\n    \/**\n     * Construct a new HOTP validation result.\n     *\n     * @param ValidationResultType $type    The result type.\n     * @param integer|null         $counter The new counter value, or null if the counter should not change.\n     *\n     * @throws Exception\\InvalidResultException If the supplied arguments constitute an invalid result.\n     *\/\n    public function __construct(ValidationResultType $type, $counter = null)\n    {\n        if (\n            (ValidationResultType::VALID() === $type && null === $counter) ||\n            (ValidationResultType::VALID() !== $type && null !== $counter)\n        ) {\n            throw new Exception\\InvalidResultException;\n        }\n\n        parent::__construct($type);\n\n        $this->counter = $counter;\n    }\n\n    \/**\n     * Get the new counter value.\n     *\n     * @return integer|null The new counter value, or null if the counter should not change.\n     *\/\n    public function counter()\n    {\n        return $this->counter;\n    }\n\n    private $counter;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,3,4,2,null,null,2,null,2,2,null,null,null,null,null,null,null,null,2,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/HotpValidationResultInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result;\n\n\/**\n * The interface implemented by HOTP validation results.\n *\/\ninterface HotpValidationResultInterface extends OtpValidationResultInterface\n{\n    \/**\n     * Get the new counter value.\n     *\n     * @return integer|null The new counter value, or null if the counter should not change.\n     *\/\n    public function counter();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/OtpValidationResultInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result;\n\n\/**\n * The interface implemented by OTP validation results.\n *\/\ninterface OtpValidationResultInterface\n{\n    \/**\n     * Get the result type.\n     *\n     * @return ValidationResultType The result type.\n     *\/\n    public function type();\n\n    \/**\n     * Returns true if this result is a successful result.\n     *\n     * @return boolean True if this result is a successful result.\n     *\/\n    public function isSuccessful();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/TotpValidationResult.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result;\n\n\/**\n * Represents a TOTP validation result.\n *\/\nclass TotpValidationResult extends AbstractOtpValidationResult implements\n    TotpValidationResultInterface\n{\n    \/**\n     * Construct a new TOTP validation result.\n     *\n     * @param ValidationResultType $type  The result type.\n     * @param boolean|null         $drift The number of windows of clock drift, or null if unsuccessful.\n     *\n     * @throws Exception\\InvalidResultException If the supplied arguments constitute an invalid result.\n     *\/\n    public function __construct(\n        ValidationResultType $type,\n        $drift = null\n    ) {\n        if (\n            (ValidationResultType::VALID() === $type && null === $drift) ||\n            (ValidationResultType::VALID() !== $type && null !== $drift)\n        ) {\n            throw new Exception\\InvalidResultException;\n        }\n\n        parent::__construct($type);\n\n        $this->drift = $drift;\n    }\n\n    \/**\n     * Get the number of windows of clock drift.\n     *\n     * @return integer|null The number of windows of clock drift, or null if unsuccessful.\n     *\/\n    public function drift()\n    {\n        return $this->drift;\n    }\n\n    private $drift;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,3,4,2,null,null,2,null,2,2,null,null,null,null,null,null,null,null,2,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/TotpValidationResultInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result;\n\n\/**\n * The interface implemented by TOTP validation results.\n *\/\ninterface TotpValidationResultInterface extends OtpValidationResultInterface\n{\n    \/**\n     * Get the number of windows of clock drift.\n     *\n     * @return integer The number of windows of clock drift.\n     *\/\n    public function drift();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/Result\/ValidationResultType.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator\\Result;\n\nuse Eloquent\\Enumeration\\Enumeration;\n\n\/**\n * Describes the possible OTP validation result types.\n *\/\nfinal class ValidationResultType extends Enumeration\n{\n    \/**\n     * The password is valid.\n     *\/\n    const VALID = 'valid';\n\n    \/**\n     * The password is not valid.\n     *\/\n    const INVALID_PASSWORD = 'invalid-password';\n\n    \/**\n     * The password does not match the configured password length.\n     *\/\n    const PASSWORD_LENGTH_MISMATCH = 'password-length-mismatch';\n\n    \/**\n     * The supplied password sequence is empty.\n     *\/\n    const EMPTY_PASSWORD_SEQUENCE = 'empty-password-sequence';\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/TotpValidator.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator;\n\nuse Eloquent\\Otis\\Configuration\\TotpConfigurationInterface;\nuse Eloquent\\Otis\\Generator\\Exception\\InvalidPasswordLengthException;\nuse Eloquent\\Otis\\Generator\\TotpGenerator;\nuse Eloquent\\Otis\\Generator\\TotpGeneratorInterface;\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * Validates TOTP passwords.\n *\/\nclass TotpValidator implements TotpValidatorInterface\n{\n    \/**\n     * Construct a new TOTP validator.\n     *\n     * @param TotpGeneratorInterface|null $generator The generator to use.\n     * @param Isolator|null               $isolator  The isolator to use.\n     *\/\n    public function __construct(\n        TotpGeneratorInterface $generator = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $generator) {\n            $generator = new TotpGenerator;\n        }\n\n        $this->generator = $generator;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Get the generator.\n     *\n     * @return TotpGeneratorInterface The generator.\n     *\/\n    public function generator()\n    {\n        return $this->generator;\n    }\n\n    \/**\n     * Validate a TOTP password.\n     *\n     * @param TotpConfigurationInterface         $configuration The configuration to use for validation.\n     * @param Parameters\\TotpParametersInterface $parameters    The parameters to validate.\n     *\n     * @return Result\\TotpValidationResultInterface The validation result.\n     *\/\n    public function validate(\n        TotpConfigurationInterface $configuration,\n        Parameters\\TotpParametersInterface $parameters\n    ) {\n        if (strlen($parameters->password()) !== $configuration->digits()) {\n            return new Result\\TotpValidationResult(\n                Result\\ValidationResultType::PASSWORD_LENGTH_MISMATCH()\n            );\n        }\n\n        $time = $this->isolator()->time();\n\n        for (\n            $i = -$configuration->pastWindows();\n            $i <= $configuration->futureWindows();\n            ++$i\n        ) {\n            $value = $this->generator()->generate(\n                $parameters->secret(),\n                $configuration->window(),\n                $time + ($i * $configuration->window()),\n                $configuration->algorithm()\n            );\n\n            if (\n                $parameters->password() === $value->string(\n                    $configuration->digits()\n                )\n            ) {\n                return new Result\\TotpValidationResult(\n                    Result\\ValidationResultType::VALID(),\n                    $i\n                );\n            }\n        }\n\n        return new Result\\TotpValidationResult(\n            Result\\ValidationResultType::INVALID_PASSWORD()\n        );\n    }\n\n    \/**\n     * Get the isolator.\n     *\n     * @return Isolator The isolator.\n     *\/\n    protected function isolator()\n    {\n        return $this->isolator;\n    }\n\n    private $generator;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20,19,19,null,20,20,20,null,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,1,1,1,null,null,7,null,null,7,7,null,6,7,7,7,7,7,7,null,null,7,7,7,7,5,5,null,5,null,6,null,2,2,2,null,null,null,null,null,null,null,null,null,7,null,null,null,null,null]},{"name":"Eloquent\/Otis\/Validator\/TotpValidatorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Otis package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Otis\\Validator;\n\nuse Eloquent\\Otis\\Configuration\\TotpConfigurationInterface;\n\n\/**\n * The interface implemented by TOTP validators.\n *\/\ninterface TotpValidatorInterface\n{\n    \/**\n     * Validate a TOTP password.\n     *\n     * @param TotpConfigurationInterface         $configuration The configuration to use for validation.\n     * @param Parameters\\TotpParametersInterface $parameters    The parameters to validate.\n     *\n     * @return Result\\TotpValidationResultInterface The validation result.\n     *\/\n    public function validate(\n        TotpConfigurationInterface $configuration,\n        Parameters\\TotpParametersInterface $parameters\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}